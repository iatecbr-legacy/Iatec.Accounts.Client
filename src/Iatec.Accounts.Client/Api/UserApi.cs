/*
 * Accounts API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Iatec.Accounts.Client.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Iatec.Accounts.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        void ChangeUserPasswordById(Guid? id, string password);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChangeUserPasswordByIdWithHttpInfo(Guid? id, string password);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        UserModel CreateUser(UserInsertModel user = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserModel</returns>
        ApiResponse<UserModel> CreateUserWithHttpInfo(UserInsertModel user = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        void DeleteUserById(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserByIdWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (required)</param>
        /// <param name="offset"> (required)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Page&lt;UserModel&gt;</returns>
        PagedResponse<UserModel> GetPagerUserByFilter(int limit, int offset, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (required)
        /// The maximum number of records to bring.
        /// </param>
        /// <param name="offset"> (required)
        /// The number of records to skip.Used for pagination.
        /// </param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of Page&lt;UserModel&gt;</returns>
        ApiResponse<PagedResponse<UserModel>> GetPagerUserByFilterWithHttpInfo(int limit, int offset, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>UserModel</returns>
        UserModel GetUserByEmail(string email);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>ApiResponse of UserModel</returns>
        ApiResponse<UserModel> GetUserByEmailWithHttpInfo(string email);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserModel</returns>
        UserModel GetUserById(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserModel</returns>
        ApiResponse<UserModel> GetUserByIdWithHttpInfo(Guid? id);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>UserModel</returns>
        UserModel GetUserByUsername(string username);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>ApiResponse of UserModel</returns>
        ApiResponse<UserModel> GetUserByUsernameWithHttpInfo(string username);
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="password"></param>
        /// <returns></returns>
        void ResetPasswordByEmail(string email, string password);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetPasswordByEmailWithHttpInfo(string email, string password);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="password"></param>
        /// <returns></returns>
        void ResetPasswordByUsername(string username, string password);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetPasswordByUsernameWithHttpInfo(string username, string password);
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="user"></param>
        /// <returns>ApiResponse of UserModel</returns>
        UserModel UpdateUserByEmail(string email, UserInsertModel user);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="user"></param>
        /// <returns>ApiResponse of UserModel</returns>
        ApiResponse<UserModel> UpdateUserByEmailWithHttpInfo(string email, UserInsertModel user);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> </param>
        /// <param name="user"></param>
        /// <returns>UserModel</returns>
        UserModel UpdateUserById(Guid? id, UserInsertModel user);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> </param>
        /// <param name="user"></param>
        /// <returns>ApiResponse of UserModel</returns>
        ApiResponse<UserModel> UpdateUserByIdWithHttpInfo(Guid? id, UserInsertModel user);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="user"></param>
        /// <returns>ApiResponse of UserModel</returns>
        UserModel UpdateUserByUsername(string username, UserInsertModel user);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="user"></param>
        /// <returns>ApiResponse of UserModel</returns>
        ApiResponse<UserModel> UpdateUserByUsernameWithHttpInfo(string username, UserInsertModel user);
        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        System.Threading.Tasks.Task ChangeUserPasswordByIdAsync(Guid? id, string password);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeUserPasswordByIdAsyncWithHttpInfo(Guid? id, string password);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task<UserModel> CreateUserAsync(UserInsertModel user = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<UserModel>> CreateUserAsyncWithHttpInfo(UserInsertModel user = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        System.Threading.Tasks.Task DeleteUserByIdAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserByIdAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (required)</param>
        /// <param name="offset"> (required)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;UserModel&gt;</returns>
        System.Threading.Tasks.Task<PagedResponse<UserModel>> GetPagerUserByFilterAsync(int limit, int offset, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (required)
        /// The maximum number of records to bring.
        /// </param>
        /// <param name="offset"> (required)
        /// The number of records to skip.Used for pagination.
        /// </param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;UserModel&gt;</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResponse<UserModel>>> GetPagerUserByFilterAsyncWithHttpInfo(int limit, int offset, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of UserModel</returns>
        System.Threading.Tasks.Task<UserModel> GetUserByEmailAsync(string email);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserModel>> GetUserByEmailAsyncWithHttpInfo(string email);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserModel</returns>
        System.Threading.Tasks.Task<UserModel> GetUserByIdAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserModel>> GetUserByIdAsyncWithHttpInfo(Guid? id);
        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of UserModel</returns>
        System.Threading.Tasks.Task<UserModel> GetUserByUsernameAsync(string username);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserModel>> GetUserByUsernameAsyncWithHttpInfo(string username);
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="password"></param>
        /// <returns></returns>
        System.Threading.Tasks.Task ResetPasswordByEmailAsync(string email, string password);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetPasswordByEmailAsyncWithHttpInfo(string email, string password);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="password"></param>
        /// <returns></returns>
        System.Threading.Tasks.Task ResetPasswordByUsernameAsync(string username, string password);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="password"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetPasswordByUsernameAsyncWithHttpInfo(string username, string password);
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<UserModel> UpdateUserByEmailAsync(string email, UserInsertModel user);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<UserModel>> UpdateUserByEmailAsyncWithHttpInfo(string email, UserInsertModel user);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> </param>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<UserModel> UpdateUserByIdAsync(Guid? id, UserInsertModel user);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> </param>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<UserModel>> UpdateUserByIdAsyncWithHttpInfo(Guid? id, UserInsertModel user);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<UserModel> UpdateUserByUsernameAsync(string username, UserInsertModel user);

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<UserModel>> UpdateUserByUsernameAsyncWithHttpInfo(string username, UserInsertModel user);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPerson"> (optional)</param>
        /// <returns>NaturalPersonLiteExternalModel</returns>
        public void ChangeUserPasswordById(Guid? id, string password)
        {
            ChangeUserPasswordByIdWithHttpInfo(id, password);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPerson"> (optional)</param>
        /// <returns>Task of NaturalPersonLiteExternalModel</returns>
        public async System.Threading.Tasks.Task ChangeUserPasswordByIdAsync(Guid? id, string password)
        {
            await ChangeUserPasswordByIdAsyncWithHttpInfo(id, password);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPerson"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChangeUserPasswordByIdAsyncWithHttpInfo(Guid? id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi-> ChangeUserPasswordById");

            var localVarPath = "/users/{id}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

#warning REVER COM O ANDRE
            localVarPathParams.Add("id", id.Value.ToString());
            localVarFormParams.Add("password", password);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeUserPasswordById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
              localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
              null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPerson"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonLiteExternalModel</returns>
        public ApiResponse<Object> ChangeUserPasswordByIdWithHttpInfo(Guid? id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi-> ChangeUserPasswordById");

            var localVarPath = "/users/{id}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

#warning REVER COM O ANDRE
            localVarPathParams.Add("id", id.Value.ToString());
            localVarFormParams.Add("password", password);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeUserPasswordById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
               localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
               null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public UserModel CreateUser(UserInsertModel user = null)
        {
            ApiResponse<UserModel> localVarResponse = CreateUserWithHttpInfo(user);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task<UserModel> CreateUserAsync(UserInsertModel user = null)
        {
            ApiResponse<UserModel> localVarResponse = await CreateUserAsyncWithHttpInfo(user);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserModel>> CreateUserAsyncWithHttpInfo(UserInsertModel user = null)
        {
            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveForExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<UserModel> CreateUserWithHttpInfo(UserInsertModel user = null)
        {
            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        public void DeleteUserById(Guid? id)
        {
            DeleteUserByIdWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        public async System.Threading.Tasks.Task DeleteUserByIdAsync(Guid? id)
        {
            await DeleteUserByIdAsyncWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse Object(void)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserByIdAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->GetUserById");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", id.Value.ToString());

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
              localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
              null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        public ApiResponse<Object> DeleteUserByIdWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->DeleteUserById");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", id.Value.ToString());

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
               localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
               null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;UserModel&gt;</returns>
        public PagedResponse<UserModel> GetPagerUserByFilter(int limit, int offset, string filter = null)
        {
            ApiResponse<PagedResponse<UserModel>> localVarResponse = GetPagerUserByFilterWithHttpInfo(limit, offset, filter);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;UserModel&gt;</returns>
        public async System.Threading.Tasks.Task<PagedResponse<UserModel>> GetPagerUserByFilterAsync(int limit, int offset, string filter = null)
        {
            ApiResponse<PagedResponse<UserModel>> localVarResponse = await GetPagerUserByFilterAsyncWithHttpInfo(limit, offset, filter);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UserModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResponse<UserModel>>> GetPagerUserByFilterAsyncWithHttpInfo(int limit, int offset, string filter = null)
        {
            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListUserByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResponse<UserModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResponse<UserModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResponse<UserModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;UserModel&gt;</returns>
        public ApiResponse<PagedResponse<UserModel>> GetPagerUserByFilterWithHttpInfo(int limit, int offset, string filter = null)
        {
            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListUserByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResponse<UserModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResponse<UserModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResponse<UserModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>UserModel</returns>
        public UserModel GetUserByEmail(string email)
        {
            ApiResponse<UserModel> localVarResponse = GetUserByEmailWithHttpInfo(email);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of UserModel</returns>
        public async System.Threading.Tasks.Task<UserModel> GetUserByEmailAsync(string email)
        {
            ApiResponse<UserModel> localVarResponse = await GetUserByEmailAsyncWithHttpInfo(email);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserModel>> GetUserByEmailAsyncWithHttpInfo(string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling UserApi->GetUserByEmail");

            var localVarPath = "/users/by-email/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", email);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>ApiResponse of UserModel</returns>
        public ApiResponse<UserModel> GetUserByEmailWithHttpInfo(string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling UserApi->GetUserByEmail");

            var localVarPath = "/users/by-email/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", email);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserModel</returns>
        public UserModel GetUserById(Guid? id)
        {
            ApiResponse<UserModel> localVarResponse = GetUserByIdWithHttpInfo(id);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserModel</returns>
        public async System.Threading.Tasks.Task<UserModel> GetUserByIdAsync(Guid? id)
        {
            ApiResponse<UserModel> localVarResponse = await GetUserByIdAsyncWithHttpInfo(id);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserModel>> GetUserByIdAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->GetUserById");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", id.Value.ToString());

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserModel</returns>
        public ApiResponse<UserModel> GetUserByIdWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->GetUserById");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", id.Value.ToString());

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>UserModel</returns>
        public UserModel GetUserByUsername(string username)
        {
            ApiResponse<UserModel> localVarResponse = GetUserByUsernameWithHttpInfo(username);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of UserModel</returns>
        public async System.Threading.Tasks.Task<UserModel> GetUserByUsernameAsync(string username)
        {
            ApiResponse<UserModel> localVarResponse = await GetUserByUsernameAsyncWithHttpInfo(username);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserModel>> GetUserByUsernameAsyncWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->GetUserByUserName");

            var localVarPath = "/users/by-username/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", username);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByUserName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <returns>ApiResponse of UserModel</returns>
        public ApiResponse<UserModel> GetUserByUsernameWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->GetUserByUserName");

            var localVarPath = "/users/by-username/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", username); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByUserName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="password"></param>
        public void ResetPasswordByEmail(string email, string password)
        {
            ResetPasswordByEmailWithHttpInfo(email, password);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="password"></param>
        public async System.Threading.Tasks.Task ResetPasswordByEmailAsync(string email, string password)
        {
            await ResetPasswordByEmailAsyncWithHttpInfo(email, password);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="password"></param>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResetPasswordByEmailAsyncWithHttpInfo(string email, string password)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling UserApi-> ResetPasswordByEmail");

            var localVarPath = "/users/by-email/{email}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

#warning REVER COM O ANDRE
            localVarPathParams.Add("email", email);
            localVarFormParams.Add("password", password);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPasswordByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
              localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
              null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="password"></param>
        public ApiResponse<Object> ResetPasswordByEmailWithHttpInfo(string email, string password)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling UserApi-> ResetPasswordByEmail");

            var localVarPath = "/users/by-email/{email}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

#warning REVER COM O ANDRE
            localVarPathParams.Add("email", email);
            localVarFormParams.Add("password", password);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPasswordByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
               localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
               null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="password"></param>
        public void ResetPasswordByUsername(string username, string password)
        {
            ResetPasswordByUsernameWithHttpInfo(username, password);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="password"></param>
        public async System.Threading.Tasks.Task ResetPasswordByUsernameAsync(string username, string password)
        {
            await ResetPasswordByUsernameAsyncWithHttpInfo(username, password);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="password"></param>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResetPasswordByUsernameAsyncWithHttpInfo(string username, string password)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi-> ResetPasswordByUsername");

            var localVarPath = "/users/by-username/{username}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

#warning REVER COM O ANDRE
            localVarPathParams.Add("username", username);
            localVarFormParams.Add("password", password);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPasswordByUsername", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
              localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
              null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="password"></param>
        public ApiResponse<Object> ResetPasswordByUsernameWithHttpInfo(string username, string password)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi-> ResetPasswordByUsername");

            var localVarPath = "/users/by-username/{username}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

#warning REVER COM O ANDRE
            localVarPathParams.Add("username", username);
            localVarFormParams.Add("password", password);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPasswordByUsername", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
               localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
               null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="user"></param>
        public UserModel UpdateUserByEmail(string email, UserInsertModel user)
        {
            ApiResponse<UserModel> localVarResponse = UpdateUserByEmailWithHttpInfo(email, user);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="user"></param>
        public async System.Threading.Tasks.Task<UserModel> UpdateUserByEmailAsync(string email, UserInsertModel user)
        {
            ApiResponse<UserModel> localVarResponse = await UpdateUserByEmailAsyncWithHttpInfo(email, user);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="user"></param>
        public async System.Threading.Tasks.Task<ApiResponse<UserModel>> UpdateUserByEmailAsyncWithHttpInfo(string email, UserInsertModel user)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling UserApi-> UpdateUserByEmail");

            var localVarPath = "/users/by-email/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPathParams.Add("email", email.ToString());

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
              localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
              (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"> </param>
        /// <param name="user"></param>
        public ApiResponse<UserModel> UpdateUserByEmailWithHttpInfo(string email, UserInsertModel user)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling UserApi-> UpdateUserByEmail");

            var localVarPath = " /users/by-email/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPathParams.Add("email", email.ToString());

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserByEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
              localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
              (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> </param>
        /// <param name="user"></param>
        public UserModel UpdateUserById(Guid? id, UserInsertModel user)
        {
            ApiResponse<UserModel> localVarResponse = UpdateUserByIdWithHttpInfo(id, user);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> </param>
        /// <param name="user"></param>
        public async System.Threading.Tasks.Task<UserModel> UpdateUserByIdAsync(Guid? id, UserInsertModel user)
        {
            ApiResponse<UserModel> localVarResponse = await UpdateUserByIdAsyncWithHttpInfo(id, user);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> </param>
        /// <param name="user"></param>
        public async System.Threading.Tasks.Task<ApiResponse<UserModel>> UpdateUserByIdAsyncWithHttpInfo(Guid? id, UserInsertModel user)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi-> UpdateUserById");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPathParams.Add("id", id.Value.ToString());

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
              localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
              (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> </param>
        /// <param name="user"></param>
        public ApiResponse<UserModel> UpdateUserByIdWithHttpInfo(Guid? id, UserInsertModel user)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi-> UpdateUserById");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPathParams.Add("id", id.Value.ToString());

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
              localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
              (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="user"></param>
        public UserModel UpdateUserByUsername(string username, UserInsertModel user)
        {
            ApiResponse<UserModel> localVarResponse = UpdateUserByUsernameWithHttpInfo(username, user);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="user"></param>
        public async System.Threading.Tasks.Task<UserModel> UpdateUserByUsernameAsync(string username, UserInsertModel user)
        {
            ApiResponse<UserModel> localVarResponse = await UpdateUserByUsernameAsyncWithHttpInfo(username, user);
            return localVarResponse?.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="user"></param>
        public async System.Threading.Tasks.Task<ApiResponse<UserModel>> UpdateUserByUsernameAsyncWithHttpInfo(string username, UserInsertModel user)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi-> UpdateUserByUsername");

            var localVarPath = "/users/by-username/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPathParams.Add("username", username.ToString());

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserByUsername", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
              localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
              (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Accounts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"> </param>
        /// <param name="user"></param>
        public ApiResponse<UserModel> UpdateUserByUsernameWithHttpInfo(string username, UserInsertModel user)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi-> UpdateUserByUsername");

            var localVarPath = " /users/by-username/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPathParams.Add("username", username.ToString());

            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            if (localVarResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
                return null;

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserByUsername", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserModel>(localVarStatusCode,
              localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
              (UserModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserModel)));
        }

        private Iatec.Accounts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        #region Default

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Iatec.Accounts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Iatec.Accounts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Iatec.Accounts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }
        #endregion Default
    }
}